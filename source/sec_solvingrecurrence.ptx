<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="section-solvingrecurrences">
  <title>
    Solving Recurrence Relations
  </title>

  <subsection>
    <title>Motivation, or, why do I care?</title>
    <p>
      Let's imagine that we wanted to find the 10,000th term of the sequence <m>{ a_n = a_{n-2} }</m> with <m>{ a_0 =1, a_1 = 3 }</m>. The sequence is very simple: <m>{ \{1, 3, 1, 3, 1, 3, \dots\} }</m>.
    </p>
    <p>
      It turns out that the solution to this recurrence is <m>a_n = 2+(-1)^{n+1}</m>. We can directly compute the value, and it takes Sage about 150 microseconds to give us the answer:
    </p>
    <sage>
      <input>
        %%time
        def nonrec(x): return 2 + pow(-1, x+1);
            print(nonrec(10000))
      </input>
      <output>
        1
        CPU times: user 111 Âµs, sys: 57 Âµs, total: 168 Âµs
        Wall time: 144 Âµs
      </output>
    </sage>

    <p>
      But if we wanted to actually have the computer find the 10,000th value via the recursive definition, Sage (computing via Python) can't even do it:
    </p>
    <sage>
      <input>
        %%time
        def recursive(x):
            if x == 0:
                return 1;
            elif x == 1:
                return 3;
            else:
                return recursive(x-2)

        print(recursive(10000))
      </input>
      <output>
        RuntimeError: maximum recursion depth exceeded while calling a Python object
      </output>
    </sage>
    <p>
      Explicit solutions are better when we want to be able to actually determine specific values of a recurrence.
    </p>
  </subsection>

  <subsection>
    <title>Solving recurrence relations</title>
    <example>
      <statement>
        <p>
          The Towers of Hanoi is a puzzle with the goal of moving all disks from one peg to another peg. The puzzle has the following rules:
          <ol>
            <li> Place all the disks on the first peg in order of size with the largest on bottom.</li>
            <li> Move one disk at a time to any other peg. A move is valid only if a smaller disk is placed on top a larger one.</li>
          </ol>
        </p>
        <image source="Tower_of_Hanoi_4.gif" width="50%" component="html">
          <description>
            The Animation of the Towers of Hanoi puzzle by AndrÃ© Karwath. There are three pegs and in this picture four disks. The animation proceeds to show moving the top disk to the far right peg. The next disk to the middle peg, then the smallest disk to the second peg... and so on until we have moved all disks to the third peg.
          </description>
        </image>
        <image source="Tower_of_Hanoi_4.png" width="50%" component="pdf">
          <description>
            Illustration of the Towers of Hanoi puzzle. There are three pegs and in this picture four disks. The animation proceeds to show moving the top disk to the far right peg. The next disk to the middle peg, then the smallest disk to the second peg... and so on until we have moved all disks to the third peg.
          </description>
        </image>
        <p>
          Let <m>H_n</m> denote the number of moves to solve the puzzle with <m>n</m> disks. Our goal is to find a solution to the sequence <m>\{H_n\}</m>.
          <ol>
            <li>What is the recurrence relation that describes <m>H_n</m> in terms of previous values?</li>
            <li>Solve the recurrence relation.</li>
            <li>The story accompanying the puzzle says that monks are currently solving the puzzle with 64 golden disks, and that the world will end when they finally solve the puzzle. Should we be concerned? Why or why not?</li>
          </ol>
        </p>
      </statement>
      <answer component="video">
        <video youtube="aFZJ5XArC-s" />
      </answer>

    </example>


    <example>
      <statement>
        <p>
          Recall that a bit string is a string containing only 0's and 1's. How many bit strings of length <m>n</m> do not contain three consecutive 0's?
        </p>
      </statement>
      <answer component="video">
        <p>
          In this video I miscounted the number of bitstrings of length 4. I said <m>a_4 = 15</m> but if you actually count the number of bitstrings, there's only <m>a_4 = 13</m>. Oops!ðŸ˜…
        </p>
        <p>
          Note that our solution to the recurrence,
          <me> a_n = a_{n-1} + a_{n-2} + a_{n-3}</me>
          with <m>a_1 = 2, a_2 = 4,</m> and <m>a_3 = 7</m> is still correct, and matches:
          <me> a_4 = 7 + 4  +2 = 13</me>, which is what I should have found.
        </p>
        <video youtube="4ENaXarcKzM" />
      </answer>

    </example>

    <!-- I don't think this adds anything -->
    <!-- <example> -->
    <!--   <statement> -->
    <!--     <p> -->
    <!--       Find a recurrence relation for <m>C_n</m>, the number of ways to parenthesize the product of <m>n+1</m> numbers -->
    <!--       <me>x_0\cdot x_1 \cdot x_2 \cdot \dots \cdot x_n</me> -->
    <!--       to determine the order of multiplication. -->
    <!--     </p> -->
    <!--     <p> -->
    <!--       The sequence <m>\{C_n\}</m> is the sequence of Catalan numbers. We will revisit them in homework and again briefly in Math 322. -->
    <!--     </p> -->
    <!--   </statement> -->
    <!-- </example> -->

    <example xml:id="example-fifth-degree-recurrence">
      <statement>
        <p>
          A vending machine dispensing books of stamps accepts $1 coins, $1 bills, and 5 bills. Find a recurrence relation for the number of ways to deposit <m>n</m> dollars in the vending machine, where the order in which the bills are deposited matters.
        </p>
      </statement>
      <answer component="video">
        <video youtube="oigH5x633sI" />
      </answer>
    </example>

  </subsection>

  <subsection>
    <title>
      Solving particularly nice recurrence relations
    </title>


    <definition>
      <title>Linear, Homogeneous Recurrence Relations of Degree k</title>
      <statement>
        <p>
          A <term>linear homogeneous recurrence relation of degree <m>k</m> with constant coefficients</term> is a recurrence relation of the form
          <me>a_n = c_1 a_{n-1} + c_2a_{n-2} + \dots + c_k a_{n-k}</me>
          where <m>c_1, c_2, \dots , c_k</m> are real numbers with <m>c_k \not=0</m>.
        </p>

      </statement>
    </definition>

    <example>
      <statement>
        <p>
          <ol>
            <li> The Fibonacci sequence: <m>F_n = F_{n-1} + F_{n-2}</m> is linear, and its
              coefficients are 1 and 1. The degree is 2. </li>
            <li>
              <m>D_n = 2D_{n-1} + D_{n-5}</m> is linear, and it coefficients are 2, 0, 0, 0, 1. Its
              degree is 5. </li>
            <!-- <li> Parenthesizing <m>n+1</m> terms, <m>C_n = \sum_{k=0}^{n-1} C_{n-k}C_k</m> is
            <emph>not</emph> linear.  -->
          </ol>
        </p>
      </statement>
    </example>
    
    <p>
      For the purposes of this learning the concept, we will restrict ourselves to degree two recurrences. This means the characteristic equations are quadratic and can be easily solved. The same process would apply if the characteristic equation were of higher degree - it's just that solving those equations isn't straightforward and takes away from focusing on the new material.
    </p>

    <p>
      Now let's play with how we can actually solve this type of recurrence. Let's pretend that <m>a_n = r^n</m> is a solution to the (degree two) recurrence relation <m>a_n = c_1 a_{n-1} + c_2 a_{n-2}</m> for some variable <m>r</m>.
    </p>
    <p>

      Let's plug it in to the recurrence and simplify:
      <md>
        <mrow> \displaystyle a_n &amp;= c_1 a_{n-1} + c_2a_{n-2} </mrow>
        <mrow> \displaystyle r^n &amp;= c_1 r^{n-1} + c_2r^{n-2} </mrow>
        <mrow> \text{ Divide both sides by } r^{n-2}</mrow>
        <mrow>
          \displaystyle r^2 &amp;= c_1 r + c_2
        </mrow>
        <mrow>\displaystyle r^2 - c_1 r - c_2 &amp;= 0</mrow>
      </md>
      This equation, <m>r^2 - c_1 r - c_2 = 0</m>, is a quadratic equation in the variable <m>r</m>, and we'll give it a special name.
    </p>

    <definition>
      <title>Characteristic Equation</title>
      <statement>
        <p>
          We call the equation <m>\displaystyle r^2 - c_1 r - c_2= 0</m> the <term>characteristic equation</term> of the recurrence relation. The solutions to this equation are the <term>characteristic roots</term>.
        </p>
      </statement>
    </definition>

    
    <theorem>
      <statement>
        <p>
          Let <m>c_1</m> and <m>c_2</m> be real numbers. Suppose that the characteristic equation
          <me>r^2 - c_1 r - c_2 = 0</me>
          has two distinct roots <m>r_1</m> and <m>r_2</m>. Then the sequence <m>\{a_n\}</m> is a solution to the recurrence relation
          <me> a_n = c_1 a_{n-1} + c_2 a_{n-2}</me>
          if, and only if
          <me> a_n = \alpha_1 r_1^n + \alpha_2 r_2^n</me>
          for <m>n = 0, 1, 2, \dots</m> and <m>\alpha_1</m> and <m>\alpha_2</m> are constants.
        </p>
      </statement>
    </theorem>

    <example>
      <statement>
        <p>
          Solve <m>a_n = a_{n-1} + 2a_{n-2}</m> where <m>a_0=2</m> and <m>a_1=7</m>.
        </p>
      </statement>
      <answer component="video">
        <video youtube="JicG-l7ohfA" />
      </answer>

      <solution>
        <p>
        After using the characteristic root method, we find the answer is <m>a_n = 3\cdot 2^{n} + (-1)^{n+1}</m>. We can confirm our answer by comparing this explicit solution with the recursive version using Python!
        </p>

        <sage>
          <input>
def f(n):
    return 3*pow(2,n)+pow(-1, n+1)

def recur(n):
    if n==0:
        return 2
    elif n==1:
        return 7
    else:
        return recur(n-1) + 2*recur(n-2)

print("Using the explicit solution: " + str(list(map(f,range(0,10)))))
print("\n")
print("Recursive sequence: " + str(list(map(recur,range(0, 10)))))
          </input>
          <output>
Using the explicit solution: [2, 7, 11, 25, 47, 97, 191, 385, 767, 1537, 3071]

Recursive sequence: [2, 7, 11, 25, 47, 97, 191, 385, 767, 1537, 3071]
          </output>
        </sage>
      </solution>
    </example>

    <theorem>
      <statement>
        <p>
          Let <m>c_1</m> and <m>c_2</m> be real numbers. Suppose that the characteristic equation
          <me>r^2 - c_1 r - c_2 = 0</me>
          has one and only one root <m>r_1</m>. Then the sequence <m>\{a_n\}</m> is a solution to the recurrence relation
          <me> a_n = c_1 a_{n-1} + c_2 a_{n-2}</me>
          if, and only if
          <me> a_n = \alpha_1 r_1^n + \alpha_2 n r_1^n</me>
          for <m>n = 0, 1, 2, \dots</m> and <m>\alpha_1</m> and <m>\alpha_2</m> are constants.
        </p>
      </statement>
    </theorem>

    <p>
      Note the small differences between these statements. It is significant with respect to how you solve the sequence.
    </p>

    <example>
      <statement>
        <p>
          Solve <m>a_n = 4a_{n-1} - 4a_{n-2}</m> where <m>a_0=6</m> and <m>a_1=8</m>.
        </p>
      </statement>
      <answer component="video">
        <video youtube="Xj2WqRX4Qb0" />
      </answer>

    </example>

    <example>
      <statement>
        <p>
          Find an explicit formula for the Fibonacci numbers, <m>F_n = F_{n-1} + F_{n-2}</m> with <m>F_0 = 0</m> and <m>F_1 = 1</m>.
        </p>
      </statement>
      <answer component="video">
        <video youtube="d3WhI-QaqBE" />
      </answer>

    </example>


    <example xml:id="example-7an-1-12an-2">
      <statement>
        <p>
          Solve <m>a_n = 7a_{n-1} - 12a_{n-2}</m> with <m>a_0 = 12</m> and <m>a_1 = 48</m>
        </p>
      </statement>
    </example>
    <answer component="video">
      <video youtube="WiTOTycl1dg" />
    </answer>

  </subsection>

  <subsection xml:id="sec-recurrences-with-python">
    <title>Computer Corner</title>
    <p>
      This computer corner isn't about a particular connection to computer science but rather just helping explain some of the Python functions I've used above as we checked our answers. You can use this to check your own answers! We'll walk through, changing one piece of code at a time as we build up our building blocks.
    </p>
    <aside>
      <p>Here we're highlighting that sequences are actually just functions, and we can compute them via CS functions. They just happen to be functions defined only on <m>\N</m>
      </p>
    </aside>
    <p>
      In Python, <url href="https://www.w3schools.com/python/python_functions.asp" visual="https://www.w3schools.com/python/python_functions.asp">you define a function</url> by writing <c>def functionName(x):</c> where <c>x</c> is the input variable and the colon is not optional. Everything inside the function <em>must</em> be indented!
    </p>
    <p>
      Here's an example function that squares whatever is input.
    </p>
    <sage language="python">
      <input>
def square(x):
    return x*x   #this means x times itself

# print 5^2
print(square(5))
      </input>
      <output>
        25
      </output>
    </sage>
    <p>
      The <url href="https://www.w3schools.com/python/ref_func_map.asp" visual="https://www.w3schools.com/python/ref_func_map.asp"><c>map</c> function </url> takes two inputs, the first is a function and the second is a list.  <c>map</c> applies the function to each and every input in the list. It does this <em>lazily</em>, though, meaning that if you just call <c>map(square, [1,2,3,4])</c>, you'll be returned a <em>promise</em> that Python will actually do the computation in the future. Here's what I mean:
    </p>
    <sage language="python">
      <input>
def square(x):
    return x*x

# Ask Python to print the results of our map
print(map(square, [1,2,3,4]))
      </input>
      <output>
        map object at 0x7fcf38394dc0
      </output>
    </sage>
    <p>
      ... Python returns <c>map object at somememoryaddress</c> because it refers to a map that hasn't actually been computed. If we want to actually find the value, we will explicitly ask Python to return a list of values.  Wrap <c>map</c> into a <c>list</c> function call.
      <cd>    print(list(map(square, [1,2,3,4])))</cd>
    </p>
    <p>
      Next, instead of typing <c>[1, 2, 3, 4]</c>, we can use <c>range(1, 5)</c> to return the same list. <c>range(a,b)</c> returns all integers <m>a \le x \lt b</m>. Change the code above, replacing the typed-out list with a range:
      <cd>    print(list(map(square, range(1, 5))))</cd>
    </p>
    <p>
      There's one more feature we need. If we want to write an arbitrary power (such as <m>x^2</m> or even <m>2^x</m>), we use the <url href="https://www.w3schools.com/python/ref_func_pow.asp" visual="https://www.w3schools.com/python/ref_func_pow.asp"><c>pow</c> function</url>. For example, <m>x^2</m> is <c>pow(x,2)</c>, which <m>2^x</m> is <c>pow(2,x)</c>. Try rewriting our square function to use it in place of <c>x*x</c>.
    </p>
    <p>
      Now we can put it all together to check our solutions to recurrence relations. For example, in example <xref ref="example-7an-1-12an-2"/>, we found the solution was <m>a_n = 3\cdot 4^{n+1}</m>, then we can build the function <c>a(n)</c> that returns the right-side:
    </p>
    <sage language="python">
      <input>
def a(n):
    return 3*pow(4, n+1)

# Ask Python to find the first 10 elements of the sequence, starting from the 0th element
print(list(map(a, range(0, 10))))
      </input>
      <output>
        [12, 48, 192, 768, 3072, 12288, 49152, 196608, 786432, 3145728]
      </output>
    </sage>

    <p>
      We can compare that against the recursive version of the sequence by writing the recursive function (the function calls itself):
    </p>
    <sage language="python">
      <input>
def recur(n):
    if n==0:  # a_0 = 12
        return 12
    elif n==1:  # a_1 = 48
        return 48
    else:  # a_n = 7*a_{n-1} - 12*a_{n-2}
        return 7*recur(n-1) - 12*recur(n-2)

# Ask Python to find the first 10 elements of the sequence, starting from the 0th element
print(list(map(recur, range(0, 10))))
      </input>
      <output>
        [12, 48, 192, 768, 3072, 12288, 49152, 196608, 786432, 3145728]
      </output>
    </sage>
    <p>
      It worked! Hooray!  If you have questions about it, please don't hesitate to ask me.
    </p>
  </subsection>

  <exercises>
    <exercise>
      <statement>
        <p>
          Find a recurrence relation for the number of ways to give someone <m>n</m> dollars if you have 1 dollar coins, 2 dollar coins, 2 dollar bills, and 4 dollar bills where the order in which the coins and bills are paid matters.
        </p>
      </statement>
      <solution>
        <p>
          <m>a_n = a_{n-1} + 2a_{n-2} + a_{n-4}</m>
        </p>
      </solution>

    </exercise>


    <!-- the following is adapted from https://github.com/oscarlevin/discrete-book -->
    <exercise>
      <statement>
        <p>
          Solve the recurrence relation <m>a_n = a_{n-1} + 2^n</m> with <m>a_0 = 5</m>.
        </p>
      </statement>
      <solution>
        <p>
          <m>a_n = 3 + 2^{n+1}</m>.  We should use telescoping or iteration here.  For example, telescoping gives
          <md>
            <mrow>a_1 - a_0 \amp = 2^1</mrow>
            <mrow>a_2 - a_1 \amp = 2^2</mrow>
            <mrow>a_3 - a_2 \amp = 2^3</mrow>
            <mrow>\vdots\amp \vdots </mrow>
            <mrow>a_n - a_{n-1} \amp = 2^n</mrow>
          </md>
          which <q>telescopes</q> to <m>a_n - a_0 = 2^{n+1} - 2</m>.  Substituting <m>a_0 = 5</m> and solving for <m>a_n</m> completes the solution.
        </p>
      </solution>
    </exercise>

    <!-- the following comes from https://github.com/oscarlevin/discrete-book -->
    <exercise>
      <statement>
        <p>
          Show that <m>4^n</m> is a solution to the recurrence relation <m>a_n = 3a_{n-1} + 4a_{n-2}</m>.
        </p>
      </statement>
      <solution>
        <p>
          We claim <m>a_n = 4^n</m> works. Plug it in: <m>4^n = 3(4^{n-1}) + 4(4^{n-2})</m>. This works - just simplify the right-hand side.
        </p>
      </solution>
    </exercise>

    <!-- the following comes from https://github.com/oscarlevin/discrete-book -->
    <exercise>
      <statement>
        <p>
          Find the solution to the recurrence relation <m>a_n = 3a_{n-1} + 4a_{n-2}</m> with initial terms <m>a_0 = 2</m> and <m>a_1 = 3</m>.
        </p>
      </statement>
      <solution>
        <p>
          By the Characteristic Root Technique. <m>a_n = 4^n + (-1)^n</m>.
        </p>
      </solution>
    </exercise>

    <!-- the following comes from https://github.com/oscarlevin/discrete-book -->
    <exercise>
      <statement>
        <p>
          Find the solution to the recurrence relation <m>a_n = 3a_{n-1} + 4a_{n-2}</m> with initial terms <m>a_0 = 5</m> and <m>a_1 = 8</m> using the characteristic root method..
        </p>
      </statement>
      <solution>
        <p>
          <m> a_n = \frac{13}{5}(4)^n + \frac{12}{5}(-1)^n</m>
        </p>
      </solution>

    </exercise>

    <exercise>
      <statement>
        <p>
          While walking up stairs you notice that you have a habit of using 3 ways of taking one step and 4 ways of taking two steps at a time. Find a recurrence relation for the number of ways to go up <m>n</m> steps. Solve the recurrence relation given the initial conditions of <m>a_0 = 1</m> and <m>a_1 = 3</m> using the characteristic root method. 
        </p>
      </statement>
      <solution>
        <p>
          The recurrence is <m>a_n = 3a_{n-1} + 4a_{n-2}</m>. The solution with the given initial conditions is <m>a_n = \frac{4^{n+1}}{5} + \frac{(-1)^n}{5}</m>
        </p>
      </solution>

    </exercise>

    <exercise>
      <statement>
        <p>
          Solve the recurrence <m>a_n = 3a_{n-1} + 40a_{n-2}</m> where <m>a_0 = 5</m> and <m>a_1 = 14</m> using the characteristic root method.
        </p>
      </statement>
      <solution>
        <p>
          <m>a_n = 3(8)^n + 2(-5)^n</m>
        </p>
      </solution>

    </exercise>

    <exercise>
      <statement>
        <p>
          Solve the recurrence <m>a_n = 4a_{n-1} + 21a_{n-2}</m> where <m>a_0 = 18</m> and <m>a_1 = 366</m> using the characteristic root method.
        </p>
      </statement>
      <solution>
        <p>
         <m>a_n = 42 (7)^n - 24(-3)^n</m> you could write <m>a_n = 6(7)^{n+1} + 8(-3)^{n+1}</m>
        </p>
      </solution>

    </exercise>

  </exercises>

  <subsection component="forums">
    <title>Forum Posts about this section</title>

    <slate xml:id="discourse-solving-recur" surface="html" >
      <div id='discourse-comments'></div>
      <script type="text/javascript">
        DiscourseEmbed = { discourseUrl: 'https://discourse.math.wichita.edu/',
        topicId: 299 };

        (function() {
        var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
        d.src = DiscourseEmbed.discourseUrl + 'javascripts/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
        })();
      </script>
    </slate>
  </subsection>
</section>
