<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="section-numtheory-encryption">
  <title>Application: Encryption</title>

  <subsection xml:id="subsection-numtheory-ciphers">
    <title>
      Basic Cipher Examples
    </title>

    <p>
      Our convention will be to use only capital English letters, A to Z. We will identify each letter with the remainders modulo 26. We won't encrypt punctuation, either.:
      <table>
        <title>List of Alphabet Encoding</title>
        <tabular>
          <col right="minor"/>
          <col left="minor"/>
          <col right="major"/>
          <col right="minor"/>
          <col left="minor"/>
          <col right="major"/>
          <col right="minor"/>
          <col left="minor"/>
          <col right="major"/>
          <col right="minor"/>
          <col left="minor"/>
          <col right="major"/>
          <col right="minor"/>
          <col left="minor"/>
          <row bottom="minor">
            <cell>
              A
            </cell>
            <cell>
              0
            </cell>
            <cell>
            </cell>
            <cell>
              G
            </cell>
            <cell>
              6
            </cell>
            <cell>
            </cell>
            <cell>
              M
            </cell>
            <cell>
              12
            </cell>
            <cell>
            </cell>
            <cell>
              S
            </cell>
            <cell>
              18
            </cell>
            <cell>
            </cell>
            <cell>
              Y
            </cell>
            <cell>
              24
            </cell>
          </row>
          <row bottom="minor">
            <cell>
              B
            </cell>
            <cell>
              1
            </cell>
            <cell>
            </cell>
            <cell>
              H
            </cell>
            <cell>
              7
            </cell>
            <cell>
            </cell>
            <cell>
              N
            </cell>
            <cell>
              13
            </cell>
            <cell>
            </cell>
            <cell>
              T
            </cell>
            <cell>
              19
            </cell>
            <cell>
            </cell>
            <cell>
              Z
            </cell>
            <cell>
              25
            </cell>
          </row>
          <row bottom="minor">
            <cell>
              C
            </cell>
            <cell>
              2
            </cell>
            <cell>
            </cell>
            <cell>
              I
            </cell>
            <cell>
              8
            </cell>
            <cell>
            </cell>
            <cell>
              O
            </cell>
            <cell>
              14
            </cell>
            <cell>
            </cell>
            <cell>
              U
            </cell>
            <cell>
              20
            </cell>
            <cell>
            </cell>
            <cell>
            </cell>
            <cell>
            </cell>
          </row>
          <row bottom="minor">
            <cell>
              D
            </cell>
            <cell>
              3
            </cell>
            <cell>
            </cell>
            <cell>
              J
            </cell>
            <cell>
              9
            </cell>
            <cell>
            </cell>
            <cell>
              P
            </cell>
            <cell>
              15
            </cell>
            <cell>
            </cell>
            <cell>
              V
            </cell>
            <cell>
              21
            </cell>
            <cell>
            </cell>
            <cell>
            </cell>
            <cell>
            </cell>
          </row>
          <row bottom="minor">
            <cell>
              E
            </cell>
            <cell>
              4
            </cell>
            <cell>
            </cell>
            <cell>
              K
            </cell>
            <cell>
              10
            </cell>
            <cell>
            </cell>
            <cell>
              Q
            </cell>
            <cell>
              16
            </cell>
            <cell>
            </cell>
            <cell>
              W
            </cell>
            <cell>
              22
            </cell>
            <cell>
            </cell>
            <cell>
            </cell>
            <cell>
            </cell>
          </row>
          <row bottom="minor">
            <cell>
              F
            </cell>
            <cell>
              5
            </cell>
            <cell>
            </cell>
            <cell>
              L
            </cell>
            <cell>
              11
            </cell>
            <cell>
            </cell>
            <cell>
              R
            </cell>
            <cell>
              17
            </cell>
            <cell>
            </cell>
            <cell>
              X
            </cell>
            <cell>
              23
            </cell>
            <cell>
            </cell>
            <cell>
            </cell>
            <cell>
            </cell>
          </row>
        </tabular>
      </table>
    </p>

    <definition>
      <statement>
        <p>
          A <term>shift cipher</term> is one in which the letters of the alphabet have been shifted by some fixed amount.
        </p>
      </statement>
    </definition>
    <example>
      <statement>
        <p>
          The classic example is the so-called <term>Caesar Cipher</term> which shifts the alphabet to the right three letters. A becomes D, B becomes E, etc.
        </p>
        <p>
          We encrypt letter-by-letter via the function <m>e(x) = x + 3 \pmod{26}</m> and decrypt via <m>d(x) = x-3 \pmod{26}</m>. 
        </p>

      </statement>
    </example>


    <definition>
      <statement>
        <p>
          An <term>affine cipher</term> is one in which letters are transformed via a linear function, <m>e(x) = ax+b \pmod{n} </m> where <m>a, b\in \Z</m> and <m>n\in \Z^+</m>. If <m>a =1</m>, this is a shift cipher.
        </p>
      </statement>
    </definition>

    <note>
      <p>
        To be able to decrypt an affine function, we need <m>\gcd(a,n)=1</m> in order that <m>a</m> is an invertible element. We can find the inverse via the <xref ref="euclidean-algorithm"> Euclidean Algorithm with back-substitution</xref>. Recall, the inverse of an invertible element is its BÃ©zout coefficient.
      </p>
    </note>

    <example>
      <statement>
        <p>
          The function <m>f(x) = 5x + 14 \pmod{26} </m> is an example of an affine cipher function.
          <ol>
            <li>
              <p>
                Encipher the following letters:
                <ol>
                  <li>A</li>
                  <li>M</li>
                </ol>
              </p>
            </li>
            <li>
              <p>
                Given that <m>5^{-1} \equiv 21\pmod{26}</m>, find the inverse of <m>f(x)=5x+14\pmod{26}</m>. Please ensure your coefficients are reduced modulo <m>26</m>.
              </p>
            </li>
            <li>
              Verify your inverse by confirming it deciphers the letters above.
            </li>
          </ol>
        </p>
      </statement>
    </example>

    <definition>
      <title>The RSA Algorithm</title>
      <statement>
        <p>
          RSA is an example of a public-key algorithm. Its security is based on the fact that factoring integers is <a href="https://en.wikipedia.org/wiki/Integer_factorization">a hard problem</a>. The process is outlined below: 
        </p>
          
        <p>
          To determine the keys:
          <ol>
            <li>Choose two prime numbers <m>p \and q</m>. Let <m>n=pq \and {m = (p-1)(q-1)}</m>.</li>
            <li>Find any number <m>e</m> which is relatively prime to <m>m</m></li>. 
            <li>Determine <m>d</m> which is the inverse of <m>e</m> modulo <m>m</m></li>. 
            <li>Your public key is <m>(e, n)</m>.</li>
            <li>Your private key is <m>(d, n)</m>.</li>
          </ol>
        </p>

        <p>
          To encrypt/decrypt:
          <ol>
            <li> Convert our message (plaintext or ciphertext) to numeric values, each letter taking up two digits: A is 00, B is 01, ... Z = 25. </li>
            <li>
              <p>
                Using the chosen <m>n</m> value, we split the message into blocks of even length according to the following scheme:
                <ol>
                  <li> If <m>2525 \lt n \lt 252525</m>, then the blocks will be length 4  </li>
                  <li> If <m>252525 \lt n \lt 25252525</m>, then the blocks will be length 6  </li>
                  <li> If <m>25252525 \lt n \lt 2525252525</m>, then the blocks will be length 8  </li>
                  <li> and so on... </li>
                </ol>
                if the message doesn't fit the appropropriate block size, append a number of 23's at the end. (padding the message with X's).
              </p>
            </li>
            <li> Encryption occurs my taking each numeric message block <m>M</m> and computing <m>M^e\pmod{n}</m></li>
            <li> Decryption occurs my taking each numeric cipher block <m>C</m> and computing <m>C^d\pmod{n}</m></li>
          </ol>
          This works because <m>(M^e)^d = M^{ed} = M^1 \pmod{n}</m>. Although we haven't proven this, it's a result of Euler's Totient Theorem which you'll revisit in Number Theory.
        </p>
      </statement>
    </definition>

    <example>
      <statement>
        <p>
          Let <m>p = 59, q=83</m>. Choose <m>e=15</m> Encrypt <q>WHATS UP</q> and then decrypt the result to confirm it worked. Do this by hand (with the help of a calculator). 
        </p>
      </statement>
    </example>


    <exercises>
      <exercise>
        <statement>
          <p>
            Decrypt the following message, which was encrypted by the standard Caesar cipher: <q>L FDQ DOZDBV WUXVW BRX, EUXWXV.</q>
          </p>
          <solution>
            <p>
              <q>I can always trust you, Brutus.</q>
            </p>
          </solution>

        </statement>
      </exercise>

      <exercise>
        <statement>
          <p>
            Apply the affine shift <m>e(x) = 7x + 11 \pmod{ 26 }</m> to the string, <q>Encrypt me.</q>
          </p>
        </statement>
        <solution>
          <p>
            Removing spaces from the words and capitalizing everything: <q>NYZAXMOORN</q>. The integer values are 13, 24, 25, 0, 23, 12, 14, 14, 17, 13.
          </p>
        </solution>

      </exercise>

      <exercise>
        <statement>
          <p>
            Decrypt the text which was encrypted via the affine shift <m>e(x) = 7x + 11 \pmod{ 26 }</m>: <q>LJNHFRN</q>
          </p>
        </statement>
        <solution>
          <p>
            <q>Awesome</q>.
          </p>
        </solution>

      </exercise>

    </exercises>
  </subsection>

  <subsection xml:id="subsection-numtheory-sage">
    <title>
      Number Theory Using Sage
    </title>

    <p>
      Sage has a convenient way of determining if a number is prime by asking if the number is in a set primes: 
      <sage>
        <input>
          37 in Primes()
        </input>
        <output>
          True
        </output>
      </sage>
      Try testing any number in the cell above.
    </p>

    <p>
      If you want to just want to get a prime number of some particular size (as we want with our <xref ref="rsa-activity">RSA activity</xref>), we ask sage for the <code>next_prime</code>:
      <sage>
        <input>
          next_prime(123456)
        </input>
        <output>
          123457
        </output>
      </sage>
    </p>

    <p xml:id="bezout-gcd">
      The following Sage code allows us to find the GCD and BÃ©zout coefficients via the <code>xgcd</code> command:
      <sage>
        <input>
          # Change a and b to be any positive integers, then press Evaluate
          a=2345
          b = 234
          l = a.xgcd(b)
          pretty_print(str(l[0]) + "=" + str(a) + "*(" + str(l[1]) + ") + " + str(b) + "*(" + str(l[2]) + ")")
        </input>
        <output>
          1=2345*(47) + 234*(-471)
        </output>
      </sage>
      The <code>xgcd</code> command returns a list of the form <code>(gcd, first BÃ©zout coefficient, second BÃ©zout coefficient)</code>, and the code above pretty-prints this in a readable format.
    </p>

    <p>
      In order to do modular exponentiation, we use the <code>powermod</code> function. For example, to compute <m>2019^{2019} \pmod{1000}</m>:
      <sage>
        <input>
          2019.powermod(2019,1000)
        </input>
        <output>
          979
        </output>
      </sage>
    </p>

  </subsection>


  <subsection xml:id="rsa-activity">
    <title>
      The RSA Activity
    </title>

    <exercises>
      <exercise>
        <statement>
          <p>
            In this activity, you will generate a public/private key-pair. You will send me the public key and keep your private key secret (but don't lose it! If you lose your private key, you won't be able to complete the assignment and will receive no credit).

            <ol>
              <li> Pick two prime numbers <m>p \and q</m> of some interesting size. Make them at least six or seven digits long (use Sage's <c>next_prime</c>). </li>
              <li> Let <m>m=(p-1)(q-1)</m>, and pick any number <m>e</m> relatively prime to <m>m</m>. </li>
              <li> Find the multiplicative inverse, <m>d</m>, of <m>e</m> modulo <m>m</m>.</li>
              <li> Let <m>n = pq</m>. </li>
              <li> Record your numbers <m>(n, p, q, m, e, d)</m> somewhere safe (but much of this is private! Keep it secret!).</li>
              <li>
                <p>
                  Send me your public key on via <url href="mailto:john.hammond@wichita.edu?subject=My RSA Key">email (you can click this link!)</url> as:
                  <cd>
                    n = 15244346903
                    e = 751 
                  </cd>
                </p>
              </li>
              <li>
                <p>
                  I'll send you an encrypted message which will look like:
                  <c>
                    [971896385, 3249912096L, 4079022731L, 8771096382L, 10148198704L]
                  </c>
                </p>
              </li>
              <li> Enter this information into the Sage cell below to decrypt it (using your <m>n, d, \and c</m>), change <c>what_to_do</c> to <q>decrypt</q>, and then press Evaluate(Python). </li>
              <li> Send me the decrypted message to confirm you decrypted it correctly (remove the padded X's if relevant, and put appropriate spaces to make it a normal English statement. For example <q>KEEPITSECRETKEEPITSAFEXX</q> will not receive full credit. </li>
            </ol>
          </p>
        </statement>
      </exercise>
    </exercises>

    <p xml:id="rsa-code">
    <sage>
      <input>
##### ENTER YOUR INFORMATION IN THE VARIABLES BELOW: ######

# If encrypting, set values for m, n, and e.
# If decrypting, set values for c, n, and d.

what_to_do = "encrypt" # Set what_to_do to either "encrypt" or "decrypt" (quotes matter)
m = "KEEP IT SECRET KEEP IT SAFE"   # A message to encrypt 
n = 15244346903    # Value of n = p*q
e = 751 # Public encryption exponent
d = 8545627279 # Private decryption exponent 
c = [971896385, 3249912096, 4079022731, 8771096382, 10148198704]   # The ciphertext as a comma separated list (formatting matters)

##### LEAVE EVERYTHING ELSE BELOW ALONE  ######
#####... unless you want to tinker with it. Please do!

import re, string, math

from itertools import zip_longest

def grouper(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

def encrypt():
    stripped_string = re.sub(r"\W|\d","", m.strip()).upper()

    int_string = ""
    for i in range(0,len(stripped_string)):
        the_int = string.ascii_uppercase.index(stripped_string[i])
        if the_int &lt; 10:
            int_string += "0" + str(the_int)
        else:
            int_string += str(the_int)

    half_num_digits = (ceil(math.log10(n))//2)
    block_size = (half_num_digits-1)*2 if (int(half_num_digits*"25") &gt; n) else half_num_digits*2        

    # append the string with x's to fill the block size.
    if (len(int_string) % block_size &gt; 0):
        int_string += "23"*((block_size-(len(int_string) % block_size))//2)

    # Chunk the message into block_size chunks; a list of string representations 
    blocks = [("".join(x)) for x in grouper(int_string, block_size)]

    cipher_blocks = []
    for block in blocks:
        cipher_blocks.append(pow(int(block), e, n))

    print(cipher_blocks)

def decrypt():
    half_num_digits = (ceil(math.log10(n))//2)
    block_size = (half_num_digits-1)*2 if (int(half_num_digits*"25") &gt; n) else half_num_digits*2        

    plain_blocks = []
    for block in c:
        plain_block = pow(int(block), d, n)
        plain_blocks.append(("0"*(block_size - len(str(plain_block))))+ str(plain_block))

    plaintext_message="".join(plain_blocks)

    message = ""
    ind = 0    
    while ind &lt; len(plaintext_message):
        message += string.ascii_uppercase[ int(plaintext_message[ind:ind+2]) ]
        ind += 2
    print(message) 


# ... pretend python has forward-declaration
which_function = {"encrypt" : encrypt, "decrypt" : decrypt}

try:
    which_function[what_to_do]()
except KeyError:
    print("Please set the variable what_to_do to either 'encrypt' or 'decrypt'.")
except IndexError:
    print("There's a problem: I can't decrypt your message.")
    print("You probably have the value of d wrong... \\nDouble check your computations of d, n, m, etc (d needs to be positive, for example)")
      </input>
    </sage>
    </p>

  </subsection>

  <subsection>
    <title>Forum Posts about this section</title>

    <slate xml:id="discourse" surface="html" >
      <div id='discourse-comments'></div>
      <script type="text/javascript">
        DiscourseEmbed = { discourseUrl: 'https://discourse.math.wichita.edu/',
        topicId: 297 };

        (function() {
        var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
        d.src = DiscourseEmbed.discourseUrl + 'javascripts/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
        })();
      </script>
    </slate>
  </subsection>

</section>
